// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	domain "github.com/mattreidarnold/gifter/domain"
	mock "github.com/stretchr/testify/mock"
)

// Group is an autogenerated mock type for the Group type
type Group struct {
	mock.Mock
}

// AddGifter provides a mock function with given fields: _a0
func (_m *Group) AddGifter(_a0 domain.Gifter) (domain.Events, error) {
	ret := _m.Called(_a0)

	var r0 domain.Events
	if rf, ok := ret.Get(0).(func(domain.Gifter) domain.Events); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Gifter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Budget provides a mock function with given fields:
func (_m *Group) Budget() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Gifters provides a mock function with given fields:
func (_m *Group) Gifters() []domain.Gifter {
	ret := _m.Called()

	var r0 []domain.Gifter
	if rf, ok := ret.Get(0).(func() []domain.Gifter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Gifter)
		}
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Group) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Group) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
